# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.4.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-22 19:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/dataframe/reference/api/mars.dataframe.Series.str.extract.rst:2
msgid "mars.dataframe.Series.str.extract"
msgstr ""

#: mars.dataframe.Series.str.extract:1 of
msgid "Extract capture groups in the regex `pat` as columns in a DataFrame."
msgstr ""

#: mars.dataframe.Series.str.extract:3 of
msgid ""
"For each subject string in the Series, extract groups from the first "
"match of regular expression `pat`."
msgstr ""

#: mars.dataframe.Series.str.extract of
msgid "Parameters"
msgstr ""

#: mars.dataframe.Series.str.extract:6 of
msgid "Regular expression pattern with capturing groups."
msgstr ""

#: mars.dataframe.Series.str.extract:8 of
msgid ""
"Flags from the ``re`` module, e.g. ``re.IGNORECASE``, that modify regular"
" expression matching for things like case, spaces, etc. For more details,"
" see :mod:`re`."
msgstr ""

#: mars.dataframe.Series.str.extract:12 of
msgid ""
"If True, return DataFrame with one column per capture group. If False, "
"return a Series/Index if there is one capture group or DataFrame if there"
" are multiple capture groups."
msgstr ""

#: mars.dataframe.Series.str.extract of
msgid "Returns"
msgstr ""

#: mars.dataframe.Series.str.extract:17 of
msgid ""
"A DataFrame with one row for each subject string, and one column for each"
" group. Any capture group names in regular expression pat will be used "
"for column names; otherwise capture group numbers will be used. The dtype"
" of each result column is always object, even when no match is found. If "
"``expand=False`` and pat has only one capture group, then return a Series"
" (if subject is a Series) or Index (if subject is an Index)."
msgstr ""

#: mars.dataframe.Series.str.extract of
msgid "Return type"
msgstr ""

#: mars.dataframe.Series.str.extract:29 of
msgid ":meth:`extractall`"
msgstr ""

#: mars.dataframe.Series.str.extract:30 of
msgid "Returns all matches (not just the first match)."
msgstr ""

#: mars.dataframe.Series.str.extract:33 of
msgid "Examples"
msgstr ""

#: mars.dataframe.Series.str.extract:34 of
msgid ""
"A pattern with two groups will return a DataFrame with two columns. Non-"
"matches will be NaN."
msgstr ""

#: mars.dataframe.Series.str.extract:45 of
msgid "A pattern may contain optional groups."
msgstr ""

#: mars.dataframe.Series.str.extract:53 of
msgid "Named groups will become column names in the result."
msgstr ""

#: mars.dataframe.Series.str.extract:61 of
msgid ""
"A pattern with one group will return a DataFrame with one column if "
"expand=True."
msgstr ""

#: mars.dataframe.Series.str.extract:70 of
msgid "A pattern with one group will return a Series if expand=False."
msgstr ""

