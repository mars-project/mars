# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.4.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-22 19:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/dataframe/reference/api/mars.dataframe.DataFrame.quantile.rst:2
msgid "mars.dataframe.DataFrame.quantile"
msgstr ""

#: mars.dataframe.DataFrame.quantile:1 of
msgid "Return values at the given quantile over requested axis."
msgstr ""

#: mars.dataframe.DataFrame.quantile of
msgid "Parameters"
msgstr ""

#: mars.dataframe.DataFrame.quantile:3 of
msgid "Value between 0 <= q <= 1, the quantile(s) to compute."
msgstr ""

#: mars.dataframe.DataFrame.quantile:5 of
msgid "Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise."
msgstr ""

#: mars.dataframe.DataFrame.quantile:7 of
msgid ""
"If False, the quantile of datetime and timedelta data will be computed as"
" well."
msgstr ""

#: mars.dataframe.DataFrame.quantile:10 of
msgid ""
"This optional parameter specifies the interpolation method to use, when "
"the desired quantile lies between two data points `i` and `j`: * linear: "
"`i + (j - i) * fraction`, where `fraction` is the   fractional part of "
"the index surrounded by `i` and `j`. * lower: `i`. * higher: `j`. * "
"nearest: `i` or `j` whichever is nearest. * midpoint: (`i` + `j`) / 2. .."
" versionadded:: 0.18.0"
msgstr ""

#: mars.dataframe.DataFrame.quantile:10 of
msgid ""
"This optional parameter specifies the interpolation method to use, when "
"the desired quantile lies between two data points `i` and `j`: * linear: "
"`i + (j - i) * fraction`, where `fraction` is the"
msgstr ""

#: mars.dataframe.DataFrame.quantile:13 of
msgid "fractional part of the index surrounded by `i` and `j`."
msgstr ""

#: mars.dataframe.DataFrame.quantile:14 of
msgid "lower: `i`."
msgstr ""

#: mars.dataframe.DataFrame.quantile:15 of
msgid "higher: `j`."
msgstr ""

#: mars.dataframe.DataFrame.quantile:16 of
msgid "nearest: `i` or `j` whichever is nearest."
msgstr ""

#: mars.dataframe.DataFrame.quantile:17 of
msgid "midpoint: (`i` + `j`) / 2."
msgstr ""

#: mars.dataframe.DataFrame.quantile of
msgid "Returns"
msgstr ""

#: mars.dataframe.DataFrame.quantile:21 of
msgid ""
"If ``q`` is an array or a tensor, a DataFrame will be returned where the"
"   index is ``q``, the columns are the columns of self, and the   values "
"are the quantiles. If ``q`` is a float, a Series will be returned where "
"the   index is the columns of self and the values are the quantiles."
msgstr ""

#: mars.dataframe.DataFrame.quantile:24 of
msgid "If ``q`` is an array or a tensor, a DataFrame will be returned where the"
msgstr ""

#: mars.dataframe.DataFrame.quantile:24 of
msgid ""
"index is ``q``, the columns are the columns of self, and the values are "
"the quantiles."
msgstr ""

#: mars.dataframe.DataFrame.quantile:26 of
msgid "If ``q`` is a float, a Series will be returned where the"
msgstr ""

#: mars.dataframe.DataFrame.quantile:27 of
msgid "index is the columns of self and the values are the quantiles."
msgstr ""

#: mars.dataframe.DataFrame.quantile of
msgid "Return type"
msgstr ""

#: mars.dataframe.DataFrame.quantile:33 of
msgid ":meth:`core.window.Rolling.quantile`"
msgstr ""

#: mars.dataframe.DataFrame.quantile:33 of
msgid "Rolling quantile."
msgstr ""

#: mars.dataframe.DataFrame.quantile:35 of
msgid ":meth:`numpy.percentile`"
msgstr ""

#: mars.dataframe.DataFrame.quantile:36 of
msgid "Numpy function to compute the percentile."
msgstr ""

#: mars.dataframe.DataFrame.quantile:39 of
msgid "Examples"
msgstr ""

#: mars.dataframe.DataFrame.quantile:53 of
msgid ""
"Specifying `numeric_only=False` will also compute the quantile of "
"datetime and timedelta data. >>> df = md.DataFrame({'A': [1, 2], ..."
"                    'B': [md.Timestamp('2010'), ..."
"                          md.Timestamp('2011')], ...                    "
"'C': [md.Timedelta('1 days'), ...                          "
"md.Timedelta('2 days')]}) >>> df.quantile(0.5, "
"numeric_only=False).execute() A                    1.5 B    2010-07-02 "
"12:00:00 C        1 days 12:00:00 Name: 0.5, dtype: object"
msgstr ""

