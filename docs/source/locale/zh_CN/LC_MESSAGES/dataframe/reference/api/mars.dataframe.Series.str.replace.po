# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.4.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-22 19:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/dataframe/reference/api/mars.dataframe.Series.str.replace.rst:2
msgid "mars.dataframe.Series.str.replace"
msgstr ""

#: mars.dataframe.Series.str.replace:1 of
msgid ""
"Replace occurrences of pattern/regex in the Series/Index with some other "
"string. Equivalent to :meth:`str.replace` or :func:`re.sub`."
msgstr ""

#: mars.dataframe.Series.str.replace of
msgid "Parameters"
msgstr ""

#: mars.dataframe.Series.str.replace:5 of
msgid "String can be a character sequence or regular expression."
msgstr ""

#: mars.dataframe.Series.str.replace:7 of
msgid ""
"Replacement string or a callable. The callable is passed the regex match "
"object and must return a replacement string to be used. See "
":func:`re.sub`."
msgstr ""

#: mars.dataframe.Series.str.replace:11 of
msgid "Number of replacements to make from start."
msgstr ""

#: mars.dataframe.Series.str.replace:13 of
msgid ""
"Determines if replace is case sensitive:  - If True, case sensitive (the "
"default if `pat` is a string) - Set to False for case insensitive - "
"Cannot be set if `pat` is a compiled regex."
msgstr ""

#: mars.dataframe.Series.str.replace:13 of
msgid "Determines if replace is case sensitive:"
msgstr ""

#: mars.dataframe.Series.str.replace:15 of
msgid "If True, case sensitive (the default if `pat` is a string)"
msgstr ""

#: mars.dataframe.Series.str.replace:16 of
msgid "Set to False for case insensitive"
msgstr ""

#: mars.dataframe.Series.str.replace:17 of
msgid "Cannot be set if `pat` is a compiled regex."
msgstr ""

#: mars.dataframe.Series.str.replace:19 of
msgid ""
"Regex module flags, e.g. re.IGNORECASE. Cannot be set if `pat` is a "
"compiled regex."
msgstr ""

#: mars.dataframe.Series.str.replace:22 of
msgid ""
"Determines if assumes the passed-in pattern is a regular expression:  - "
"If True, assumes the passed-in pattern is a regular expression. - If "
"False, treats the pattern as a literal string - Cannot be set to False if"
" `pat` is a compiled regex or `repl` is   a callable.  .. versionadded:: "
"0.23.0"
msgstr ""

#: mars.dataframe.Series.str.replace:22 of
msgid "Determines if assumes the passed-in pattern is a regular expression:"
msgstr ""

#: mars.dataframe.Series.str.replace:24 of
msgid "If True, assumes the passed-in pattern is a regular expression."
msgstr ""

#: mars.dataframe.Series.str.replace:25 of
msgid "If False, treats the pattern as a literal string"
msgstr ""

#: mars.dataframe.Series.str.replace:26 of
msgid ""
"Cannot be set to False if `pat` is a compiled regex or `repl` is a "
"callable."
msgstr ""

#: mars.dataframe.Series.str.replace of
msgid "Returns"
msgstr ""

#: mars.dataframe.Series.str.replace:32 of
msgid ""
"A copy of the object with all matching occurrences of `pat` replaced by "
"`repl`."
msgstr ""

#: mars.dataframe.Series.str.replace of
msgid "Return type"
msgstr ""

#: mars.dataframe.Series.str.replace of
msgid "Raises"
msgstr ""

#: mars.dataframe.Series.str.replace:36 of
msgid ""
"* if `regex` is False and `repl` is a callable or `pat` is a compiled"
"       regex     * if `pat` is a compiled regex and `case` or `flags` is "
"set"
msgstr ""

#: mars.dataframe.Series.str.replace:36 of
msgid ""
"if `regex` is False and `repl` is a callable or `pat` is a compiled"
"       regex     * if `pat` is a compiled regex and `case` or `flags` is "
"set"
msgstr ""

#: mars.dataframe.Series.str.replace:39 of
msgid "Notes"
msgstr ""

#: mars.dataframe.Series.str.replace:40 of
msgid ""
"When `pat` is a compiled regex, all flags should be included in the "
"compiled regex. Use of `case`, `flags`, or `regex=False` with a compiled "
"regex will raise an error."
msgstr ""

#: mars.dataframe.Series.str.replace:45 of
msgid "Examples"
msgstr ""

#: mars.dataframe.Series.str.replace:46 of
msgid ""
"When `pat` is a string and `regex` is True (the default), the given `pat`"
" is compiled as a regex. When `repl` is a string, it replaces matching "
"regex patterns as with :meth:`re.sub`. NaN value(s) in the Series are "
"left as is:"
msgstr ""

#: mars.dataframe.Series.str.replace:59 of
msgid ""
"When `pat` is a string and `regex` is False, every `pat` is replaced with"
" `repl` as with :meth:`str.replace`:"
msgstr ""

#: mars.dataframe.Series.str.replace:68 of
msgid ""
"When `repl` is a callable, it is called on every `pat` using "
":func:`re.sub`. The callable should expect one positional argument (a "
"regex object) and return a string."
msgstr ""

#: mars.dataframe.Series.str.replace:72 of
msgid "To get the idea:"
msgstr ""

#: mars.dataframe.Series.str.replace:80 of
msgid "Reverse every lowercase alphabetic word:"
msgstr ""

#: mars.dataframe.Series.str.replace:89 of
msgid "Using regex groups (extract second group and swap case):"
msgstr ""

#: mars.dataframe.Series.str.replace:98 of
msgid "Using a compiled regex with flags"
msgstr ""

