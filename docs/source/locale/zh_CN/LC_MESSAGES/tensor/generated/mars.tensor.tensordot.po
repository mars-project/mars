# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 16:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/tensor/generated/mars.tensor.tensordot.rst:2
msgid "mars.tensor.tensordot"
msgstr ""

#: mars.tensor.tensordot:1 of
msgid ""
"Compute tensor dot product along specified axes for tensors >= 1-D. Given"
" two tensors (arrays of dimension greater than or equal to one), `a` and "
"`b`, and an array_like object containing two array_like objects, "
"``(a_axes, b_axes)``, sum the products of `a`'s and `b`'s elements "
"(components) over the axes specified by ``a_axes`` and ``b_axes``. The "
"third argument can be a single non-negative integer_like scalar, ``N``; "
"if it is such, then the last ``N`` dimensions of `a` and the first ``N`` "
"dimensions of `b` are summed over. Parameters ---------- a, b : "
"array_like, len(shape) >= 1"
msgstr ""

#: mars.tensor.tensordot:13 of
msgid "Tensors to \"dot\"."
msgstr ""

#: mars.tensor.tensordot:19 of
msgid "axes"
msgstr ""

#: mars.tensor.tensordot:18 of
msgid "int or (2,) array_like"
msgstr ""

#: mars.tensor.tensordot:15 of
msgid ""
"integer_like If an int N, sum over the last N axes of `a` and the first N"
" axes of `b` in order. The sizes of the corresponding axes must match."
msgstr ""

#: mars.tensor.tensordot:18 of
msgid ""
"(2,) array_like Or, a list of axes to be summed over, first sequence "
"applying to `a`, second to `b`. Both elements array_like must be of the "
"same length."
msgstr ""

#: mars.tensor.tensordot:23 of
msgid "dot, einsum Notes ----- Three common use cases are:"
msgstr ""

#: mars.tensor.tensordot:27 of
msgid "``axes = 0`` : tensor product :math:`a\\otimes b`"
msgstr ""

#: mars.tensor.tensordot:28 of
msgid "``axes = 1`` : tensor dot product :math:`a\\cdot b`"
msgstr ""

#: mars.tensor.tensordot:29 of
msgid "``axes = 2`` : (default) tensor double contraction :math:`a:b`"
msgstr ""

#: mars.tensor.tensordot:30 of
msgid ""
"When `axes` is integer_like, the sequence for evaluation will be: first "
"the -Nth axis in `a` and 0th axis in `b`, and the -1th axis in `a` and "
"Nth axis in `b` last. When there is more than one axis to sum over - and "
"they are not the last (first) axes of `a` (`b`) - the argument `axes` "
"should consist of two sequences of the same length, with the first axis "
"to sum over given first in both sequences, the second axis second, and so"
" forth. Examples -------- >>> import mars.tensor as mt"
msgstr ""

#: mars.tensor.tensordot:41 of
msgid ""
"A \"traditional\" example: >>> a = mt.arange(60.).reshape(3,4,5) >>> b = "
"mt.arange(24.).reshape(4,3,2) >>> c = mt.tensordot(a,b, "
"axes=([1,0],[0,1])) >>> c.shape (5, 2) >>> r = c.execute() >>> r array([["
" 4400.,  4730.],"
msgstr ""

#: mars.tensor.tensordot:50 of
msgid "[ 4532.,  4874.], [ 4664.,  5018.], [ 4796.,  5162.], [ 4928.,  5306.]])"
msgstr ""

