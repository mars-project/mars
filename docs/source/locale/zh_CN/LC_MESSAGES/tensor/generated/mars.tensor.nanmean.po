# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.4.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-22 17:45+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/tensor/generated/mars.tensor.nanmean.rst:2
msgid "mars.tensor.nanmean"
msgstr ""

#: mars.tensor.nanmean:1 of
msgid "Compute the arithmetic mean along the specified axis, ignoring NaNs."
msgstr ""

#: mars.tensor.nanmean:3 of
msgid ""
"Returns the average of the tensor elements.  The average is taken over "
"the flattened tensor by default, otherwise over the specified axis. "
"`float64` intermediate and return values are used for integer inputs."
msgstr ""

#: mars.tensor.nanmean:7 of
msgid "For all-NaN slices, NaN is returned and a `RuntimeWarning` is raised."
msgstr ""

#: mars.tensor.nanmean of
msgid "Parameters"
msgstr ""

#: mars.tensor.nanmean:9 of
msgid ""
"Tensor containing numbers whose mean is desired. If `a` is not an tensor,"
" a conversion is attempted."
msgstr ""

#: mars.tensor.nanmean:12 of
msgid ""
"Axis along which the means are computed. The default is to compute the "
"mean of the flattened tensor."
msgstr ""

#: mars.tensor.nanmean:15 of
msgid ""
"Type to use in computing the mean.  For integer inputs, the default is "
"`float64`; for inexact inputs, it is the same as the input dtype."
msgstr ""

#: mars.tensor.nanmean:19 of
msgid ""
"Alternate output tensor in which to place the result.  The default is "
"``None``; if provided, it must have the same shape as the expected "
"output, but the type will be cast if necessary.  See `doc.ufuncs` for "
"details."
msgstr ""

#: mars.tensor.nanmean:24 of
msgid ""
"If this is set to True, the axes which are reduced are left in the result"
" as dimensions with size one. With this option, the result will broadcast"
" correctly against the original `a`.  If the value is anything but the "
"default, then `keepdims` will be passed through to the `mean` or `sum` "
"methods of sub-classes of `Tensor`.  If the sub-classes methods does not "
"implement `keepdims` any exceptions will be raised."
msgstr ""

#: mars.tensor.nanmean:24 of
msgid ""
"If this is set to True, the axes which are reduced are left in the result"
" as dimensions with size one. With this option, the result will broadcast"
" correctly against the original `a`."
msgstr ""

#: mars.tensor.nanmean:28 of
msgid ""
"If the value is anything but the default, then `keepdims` will be passed "
"through to the `mean` or `sum` methods of sub-classes of `Tensor`.  If "
"the sub-classes methods does not implement `keepdims` any exceptions will"
" be raised."
msgstr ""

#: mars.tensor.nanmean:33 of
msgid "The number of chunks to combine."
msgstr ""

#: mars.tensor.nanmean of
msgid "Returns"
msgstr ""

#: mars.tensor.nanmean:36 of
msgid ""
"**m** -- If `out=None`, returns a new array containing the mean values, "
"otherwise a reference to the output array is returned. Nan is returned "
"for slices that contain only NaNs."
msgstr ""

#: mars.tensor.nanmean of
msgid "Return type"
msgstr ""

#: mars.tensor.nanmean:44 of
msgid ":func:`average`"
msgstr ""

#: mars.tensor.nanmean:44 of
msgid "Weighted average"
msgstr ""

#: mars.tensor.nanmean:47 of
msgid ":func:`mean`"
msgstr ""

#: mars.tensor.nanmean:47 of
msgid "Arithmetic mean taken while not ignoring NaNs"
msgstr ""

#: mars.tensor.nanmean:49 of
msgid ":func:`var`, :func:`nanvar`"
msgstr ""

#: mars.tensor.nanmean:52 of
msgid "Notes"
msgstr ""

#: mars.tensor.nanmean:53 of
msgid ""
"The arithmetic mean is the sum of the non-NaN elements along the axis "
"divided by the number of non-NaN elements."
msgstr ""

#: mars.tensor.nanmean:56 of
msgid ""
"Note that for floating-point input, the mean is computed using the same "
"precision the input has.  Depending on the input data, this can cause the"
" results to be inaccurate, especially for `float32`.  Specifying a "
"higher-precision accumulator using the `dtype` keyword can alleviate this"
" issue."
msgstr ""

#: mars.tensor.nanmean:63 of
msgid "Examples"
msgstr ""

