# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-07 16:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/tensor/generated/mars.tensor.take.rst:2
msgid "mars.tensor.take"
msgstr ""

#: mars.tensor.take:1 of
msgid "Take elements from a tensor along an axis."
msgstr ""

#: mars.tensor.take:3 of
msgid ""
"When axis is not None, this function does the same thing as \"fancy\" "
"indexing (indexing arrays using tensors); however, it can be easier to "
"use if you need elements along a given axis. A call such as "
"``mt.take(arr, indices, axis=3)`` is equivalent to "
"``arr[:,:,:,indices,...]``."
msgstr ""

#: mars.tensor.take:9 of
msgid ""
"Explained without fancy indexing, this is equivalent to the following use"
" of `ndindex`, which sets each of ``ii``, ``jj``, and ``kk`` to a tuple "
"of indices::"
msgstr ""

#: mars.tensor.take:22 of
msgid "a"
msgstr ""

#: mars.tensor.take:21 of
msgid "array_like (Ni..., M, Nk...)"
msgstr ""

#: mars.tensor.take:23 of
msgid "The source tensor."
msgstr ""

#: mars.tensor.take:26 of
msgid "indices"
msgstr ""

#: mars.tensor.take:25 of
msgid "array_like (Nj...)"
msgstr ""

#: mars.tensor.take:25 of
msgid "The indices of the values to extract."
msgstr ""

#: mars.tensor.take:27 of
msgid "Also allow scalars for indices."
msgstr ""

#: mars.tensor.take:29 of
msgid "axis"
msgstr ""

#: mars.tensor.take:28 of
msgid "int, optional"
msgstr ""

#: mars.tensor.take:29 of
msgid ""
"The axis over which to select values. By default, the flattened input "
"tensor is used."
msgstr ""

#: mars.tensor.take:32 mars.tensor.take:48 of
msgid "out"
msgstr ""

#: mars.tensor.take:31 of
msgid "Tensor, optional (Ni..., Nj..., Nk...)"
msgstr ""

#: mars.tensor.take:32 of
msgid ""
"If provided, the result will be placed in this tensor. It should be of "
"the appropriate shape and dtype."
msgstr ""

#: mars.tensor.take:43 of
msgid "mode"
msgstr ""

#: mars.tensor.take:42 of
msgid "{'raise', 'wrap', 'clip'}, optional"
msgstr ""

#: mars.tensor.take:35 of
msgid "Specifies how out-of-bounds indices will behave."
msgstr ""

#: mars.tensor.take:37 of
msgid "'raise' -- raise an error (default)"
msgstr ""

#: mars.tensor.take:38 of
msgid "'wrap' -- wrap around"
msgstr ""

#: mars.tensor.take:39 of
msgid "'clip' -- clip to the range"
msgstr ""

#: mars.tensor.take:41 of
msgid ""
"'clip' mode means that all indices that are too large are replaced by the"
" index that addresses the last element along that axis. Note that this "
"disables indexing with negative numbers."
msgstr ""

#: mars.tensor.take:47 of
msgid "Tensor (Ni..., Nj..., Nk...)"
msgstr ""

#: mars.tensor.take:48 of
msgid "The returned tensor has the same type as `a`."
msgstr ""

#: mars.tensor.take:52 of
msgid ""
"compress : Take elements using a boolean mask Tensor.take : equivalent "
"method"
msgstr ""

#: mars.tensor.take:58 of
msgid ""
"By eliminating the inner loop in the description above, and using `s_` to"
" build simple slice objects, `take` can be expressed  in terms of "
"applying fancy indexing to each 1-d slice::"
msgstr ""

#: mars.tensor.take:67 of
msgid ""
"For this reason, it is equivalent to (but faster than) the following use "
"of `apply_along_axis`::"
msgstr ""

#: mars.tensor.take:80 of
msgid "In this example if `a` is a tensor, \"fancy\" indexing can be used."
msgstr ""

#: mars.tensor.take:86 of
msgid "If `indices` is not one dimensional, the output also has these dimensions."
msgstr ""

