# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-12 12:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/tensor/generated/mars.tensor.random.random_integers.rst:2
msgid "mars.tensor.random.random\\_integers"
msgstr ""

#~ msgid "Random integers of type mt.int between `low` and `high`, inclusive."
#~ msgstr ""

#~ msgid ""
#~ "Return random integers of type mt.int"
#~ " from the \"discrete uniform\" distribution"
#~ " in the closed interval [`low`, "
#~ "`high`].  If `high` is None (the "
#~ "default), then results are from [1, "
#~ "`low`]. The np.int type translates to"
#~ " the C long type used by Python"
#~ " 2 for \"short\" integers and its "
#~ "precision is platform dependent."
#~ msgstr ""

#~ msgid "This function has been deprecated. Use randint instead."
#~ msgstr ""

#~ msgid "low"
#~ msgstr ""

#~ msgid "int"
#~ msgstr ""

#~ msgid ""
#~ "Lowest (signed) integer to be drawn "
#~ "from the distribution (unless ``high=None``,"
#~ " in which case this parameter is "
#~ "the *highest* such integer)."
#~ msgstr ""

#~ msgid "high"
#~ msgstr ""

#~ msgid "int, optional"
#~ msgstr ""

#~ msgid ""
#~ "If provided, the largest (signed) "
#~ "integer to be drawn from the "
#~ "distribution (see above for behavior if"
#~ " ``high=None``)."
#~ msgstr ""

#~ msgid "size"
#~ msgstr ""

#~ msgid "int or tuple of ints, optional"
#~ msgstr ""

#~ msgid ""
#~ "Output shape.  If the given shape "
#~ "is, e.g., ``(m, n, k)``, then ``m"
#~ " * n * k`` samples are drawn."
#~ "  Default is None, in which case "
#~ "a single value is returned."
#~ msgstr ""

#~ msgid "chunk_size"
#~ msgstr ""

#~ msgid "int or tuple of int or tuple of ints, optional"
#~ msgstr ""

#~ msgid "Desired chunk size on each dimension"
#~ msgstr ""

#~ msgid "gpu"
#~ msgstr ""

#~ msgid "bool, optional"
#~ msgstr ""

#~ msgid "Allocate the tensor on GPU if True, False as default"
#~ msgstr ""

#~ msgid "out"
#~ msgstr ""

#~ msgid "int or Tensor of ints"
#~ msgstr ""

#~ msgid ""
#~ "`size`-shaped array of random integers "
#~ "from the appropriate distribution, or a"
#~ " single such random int if `size` "
#~ "not provided."
#~ msgstr ""

#~ msgid "random.randint : Similar to `random_integers`, only for the half-open"
#~ msgstr ""

#~ msgid "Similar to random_integers, only for the half-open"
#~ msgstr ""

#~ msgid ""
#~ "interval [`low`, `high`), and 0 is "
#~ "the lowest value if `high` is "
#~ "omitted."
#~ msgstr ""

#~ msgid ""
#~ "To sample from N evenly spaced "
#~ "floating-point numbers between a and "
#~ "b, use::"
#~ msgstr ""

#~ msgid ""
#~ "Choose five random numbers from the "
#~ "set of five evenly-spaced numbers "
#~ "between 0 and 2.5, inclusive (*i.e.*,"
#~ " from the set :math:`{0, 5/8, 10/8,"
#~ " 15/8, 20/8}`):"
#~ msgstr ""

#~ msgid "Roll two six sided dice 1000 times and sum the results:"
#~ msgstr ""

#~ msgid "Display results as a histogram:"
#~ msgstr ""

