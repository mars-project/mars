# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 23:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/reference/dataframe/api/mars.dataframe.read_sql.rst:2
msgid "mars.dataframe.read\\_sql"
msgstr ""

#: mars.dataframe.read_sql:1 of
msgid "Read SQL query or database table into a DataFrame."
msgstr ""

#: mars.dataframe.read_sql:3 of
msgid ""
"This function is a convenience wrapper around ``read_sql_table`` and "
"``read_sql_query`` (for backward compatibility). It will delegate to the "
"specific function depending on the provided input. A SQL query will be "
"routed to ``read_sql_query``, while a database table name will be routed "
"to ``read_sql_table``. Note that the delegated function might have more "
"specific notes about their functionality not listed here."
msgstr ""

#: mars.dataframe.read_sql of
msgid "Parameters"
msgstr ""

#: mars.dataframe.read_sql:10 of
msgid "SQL query to be executed or a table name."
msgstr ""

#: mars.dataframe.read_sql:12 of
msgid ""
"or DBAPI2 connection (fallback mode)'  Using SQLAlchemy makes it possible"
" to use any DB supported by that library. If a DBAPI2 object, only "
"sqlite3 is supported. The user is responsible for engine disposal and "
"connection closure for the SQLAlchemy connectable. See `here "
"<https://docs.sqlalchemy.org/en/13/core/connections.html>`_"
msgstr ""

#: mars.dataframe.read_sql:12 of
msgid "or DBAPI2 connection (fallback mode)'"
msgstr ""

#: mars.dataframe.read_sql:14 of
msgid ""
"Using SQLAlchemy makes it possible to use any DB supported by that "
"library. If a DBAPI2 object, only sqlite3 is supported. The user is "
"responsible for engine disposal and connection closure for the SQLAlchemy"
" connectable. See `here "
"<https://docs.sqlalchemy.org/en/13/core/connections.html>`_"
msgstr ""

#: mars.dataframe.read_sql:19 of
msgid "Column(s) to set as index(MultiIndex)."
msgstr ""

#: mars.dataframe.read_sql:21 of
msgid ""
"Attempts to convert values of non-string, non-numeric objects (like "
"decimal.Decimal) to floating point, useful for SQL result sets."
msgstr ""

#: mars.dataframe.read_sql:24 of
#, python-format
msgid ""
"List of parameters to pass to execute method.  The syntax used to pass "
"parameters is database driver dependent. Check your database driver "
"documentation for which of the five syntax styles, described in PEP 249's"
" paramstyle, is supported. Eg. for psycopg2, uses %(name)s so use "
"params={'name' : 'value'}."
msgstr ""

#: mars.dataframe.read_sql:30 of
msgid ""
"- List of column names to parse as dates. - Dict of ``{column_name: "
"format string}`` where format string is   strftime compatible in case of "
"parsing string times, or is one of   (D, s, ns, ms, us) in case of "
"parsing integer timestamps. - Dict of ``{column_name: arg dict}``, where "
"the arg dict corresponds   to the keyword arguments of "
":func:`pandas.to_datetime`   Especially useful with databases without "
"native Datetime support,   such as SQLite."
msgstr ""

#: mars.dataframe.read_sql:31 of
msgid "List of column names to parse as dates."
msgstr ""

#: mars.dataframe.read_sql:32 of
msgid ""
"Dict of ``{column_name: format string}`` where format string is strftime "
"compatible in case of parsing string times, or is one of (D, s, ns, ms, "
"us) in case of parsing integer timestamps."
msgstr ""

#: mars.dataframe.read_sql:35 of
msgid ""
"Dict of ``{column_name: arg dict}``, where the arg dict corresponds to "
"the keyword arguments of :func:`pandas.to_datetime` Especially useful "
"with databases without native Datetime support, such as SQLite."
msgstr ""

#: mars.dataframe.read_sql:40 of
msgid ""
"List of column names to select from SQL table (only used when reading a "
"table)."
msgstr ""

#: mars.dataframe.read_sql:43 of
msgid ""
"If specified, return an iterator where `chunksize` is the number of rows "
"to include in each chunk. Note that this argument is only kept for "
"compatibility. If a non-none value passed, an error will be reported."
msgstr ""

#: mars.dataframe.read_sql:47 of
msgid "Sort RangeIndex if csv doesn't contain index columns."
msgstr ""

#: mars.dataframe.read_sql:49 of
msgid "The number of rows to fetch for inferring dtypes."
msgstr ""

#: mars.dataframe.read_sql:51 of
msgid "Specifies chunk size for each dimension."
msgstr ""

#: mars.dataframe.read_sql:53 of
msgid "Extra kwargs to pass to sqlalchemy.create_engine"
msgstr ""

#: mars.dataframe.read_sql:55 of
msgid "Create a new RangeIndex if csv doesn't contain index columns."
msgstr ""

#: mars.dataframe.read_sql:57 of
msgid ""
"Specify name of the column to split the result of the query. If "
"specified, the range ``[low_limit, high_limit]`` will be divided into "
"``n_partitions`` chunks with equal lengths. We do not guarantee the sizes"
" of chunks be equal. When the value is None, ``OFFSET`` and ``LIMIT`` "
"clauses will be used to cut the result of the query."
msgstr ""

#: mars.dataframe.read_sql:64 of
msgid ""
"The number of chunks to divide the result of the query into, when "
"``partition_col`` is specified."
msgstr ""

#: mars.dataframe.read_sql:67 of
msgid ""
"The lower bound of the range of column ``partition_col``. If not "
"specified, a query will be executed to query the minimum of the column."
msgstr ""

#: mars.dataframe.read_sql:71 of
msgid ""
"The higher bound of the range of column ``partition_col``. If not "
"specified, a query will be executed to query the maximum of the column."
msgstr ""

#: mars.dataframe.read_sql of
msgid "Returns"
msgstr ""

#: mars.dataframe.read_sql of
msgid "Return type"
msgstr ""

#: mars.dataframe.read_sql:82 of
msgid ":func:`read_sql_table`"
msgstr ""

#: mars.dataframe.read_sql:82 of
msgid "Read SQL database table into a DataFrame."
msgstr ""

#: mars.dataframe.read_sql:84 of
msgid ":func:`read_sql_query`"
msgstr ""

#: mars.dataframe.read_sql:85 of
msgid "Read SQL query into a DataFrame."
msgstr ""

