# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/reference/dataframe/api/mars.dataframe.Series.str.contains.rst:2
msgid "mars.dataframe.Series.str.contains"
msgstr ""

#: mars.dataframe.Series.str.contains:1 of
msgid ""
"Test if pattern or regex is contained within a string of a Series or "
"Index."
msgstr ""

#: mars.dataframe.Series.str.contains:3 of
msgid ""
"Return boolean Series or Index based on whether a given pattern or regex "
"is contained within a string of a Series or Index."
msgstr ""

#: mars.dataframe.Series.str.contains of
msgid "Parameters"
msgstr ""

#: mars.dataframe.Series.str.contains:6 of
msgid "Character sequence or regular expression."
msgstr ""

#: mars.dataframe.Series.str.contains:8 of
msgid "If True, case sensitive."
msgstr ""

#: mars.dataframe.Series.str.contains:10 of
msgid "Flags to pass through to the re module, e.g. re.IGNORECASE."
msgstr ""

#: mars.dataframe.Series.str.contains:12 of
msgid "Fill value for missing values."
msgstr ""

#: mars.dataframe.Series.str.contains:14 of
msgid ""
"If True, assumes the pat is a regular expression.  If False, treats the "
"pat as a literal string."
msgstr ""

#: mars.dataframe.Series.str.contains:14 of
msgid "If True, assumes the pat is a regular expression."
msgstr ""

#: mars.dataframe.Series.str.contains:16 of
msgid "If False, treats the pat as a literal string."
msgstr ""

#: mars.dataframe.Series.str.contains of
msgid "Returns"
msgstr ""

#: mars.dataframe.Series.str.contains:19 of
msgid ""
"A Series or Index of boolean values indicating whether the given pattern "
"is contained within the string of each element of the Series or Index."
msgstr ""

#: mars.dataframe.Series.str.contains of
msgid "Return type"
msgstr ""

#: mars.dataframe.Series.str.contains:27 of
msgid ":meth:`match`"
msgstr ""

#: mars.dataframe.Series.str.contains:27 of
msgid "Analogous, but stricter, relying on re.match instead of re.search."
msgstr ""

#: mars.dataframe.Series.str.contains:30 of
msgid ":meth:`Series.str.startswith`"
msgstr ""

#: mars.dataframe.Series.str.contains:30 of
msgid "Test if the start of each string element matches a pattern."
msgstr ""

#: mars.dataframe.Series.str.contains:32 of
msgid ":meth:`Series.str.endswith`"
msgstr ""

#: mars.dataframe.Series.str.contains:33 of
msgid "Same as startswith, but tests the end of string."
msgstr ""

#: mars.dataframe.Series.str.contains:36 of
msgid "Examples"
msgstr ""

#: mars.dataframe.Series.str.contains:37 of
msgid "Returning a Series of booleans using only a literal pattern."
msgstr ""

#: mars.dataframe.Series.str.contains:50 of
msgid "Returning an Index of booleans using only a literal pattern."
msgstr ""

#: mars.dataframe.Series.str.contains:56 of
msgid "Specifying case sensitivity using `case`."
msgstr ""

#: mars.dataframe.Series.str.contains:66 of
msgid ""
"Specifying `na` to be `False` instead of `NaN` replaces NaN values with "
"`False`. If Series or Index does not contain NaN values the resultant "
"dtype will be `bool`, otherwise, an `object` dtype."
msgstr ""

#: mars.dataframe.Series.str.contains:78 of
msgid "Returning 'house' or 'dog' when either expression occurs in a string."
msgstr ""

#: mars.dataframe.Series.str.contains:88 of
msgid "Ignoring case sensitivity using `flags` with regex."
msgstr ""

#: mars.dataframe.Series.str.contains:99 of
msgid "Returning any digit using regular expression."
msgstr ""

#: mars.dataframe.Series.str.contains:109 of
msgid ""
"Ensure `pat` is a not a literal pattern when `regex` is set to True. Note"
" in the following example one might expect only `s2[1]` and `s2[3]` to "
"return `True`. However, '.0' as a regex matches any character followed by"
" a 0."
msgstr ""

