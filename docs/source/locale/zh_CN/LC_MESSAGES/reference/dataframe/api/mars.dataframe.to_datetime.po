# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/reference/dataframe/api/mars.dataframe.to_datetime.rst:2
msgid "mars.dataframe.to\\_datetime"
msgstr ""

#: mars.dataframe.to_datetime:1 of
msgid "Convert argument to datetime."
msgstr ""

#: mars.dataframe.to_datetime of
msgid "Parameters"
msgstr ""

#: mars.dataframe.to_datetime:3 of
msgid "The object to convert to a datetime."
msgstr ""

#: mars.dataframe.to_datetime:5 of
msgid ""
"- If 'raise', then invalid parsing will raise an exception. - If "
"'coerce', then invalid parsing will be set as NaT. - If 'ignore', then "
"invalid parsing will return the input."
msgstr ""

#: mars.dataframe.to_datetime:6 of
msgid "If 'raise', then invalid parsing will raise an exception."
msgstr ""

#: mars.dataframe.to_datetime:7 of
msgid "If 'coerce', then invalid parsing will be set as NaT."
msgstr ""

#: mars.dataframe.to_datetime:8 of
msgid "If 'ignore', then invalid parsing will return the input."
msgstr ""

#: mars.dataframe.to_datetime:10 of
msgid ""
"Specify a date parse order if `arg` is str or its list-likes. If True, "
"parses dates with the day first, eg 10/11/12 is parsed as 2012-11-10. "
"Warning: dayfirst=True is not strict, but will prefer to parse with day "
"first (this is a known bug, based on dateutil behavior)."
msgstr ""

#: mars.dataframe.to_datetime:16 of
msgid ""
"Specify a date parse order if `arg` is str or its list-likes.  - If True "
"parses dates with the year first, eg 10/11/12 is parsed as   2010-11-12. "
"- If both dayfirst and yearfirst are True, yearfirst is preceded (same   "
"as dateutil).  Warning: yearfirst=True is not strict, but will prefer to "
"parse with year first (this is a known bug, based on dateutil behavior)."
msgstr ""

#: mars.dataframe.to_datetime:16 of
msgid "Specify a date parse order if `arg` is str or its list-likes."
msgstr ""

#: mars.dataframe.to_datetime:18 of
msgid ""
"If True parses dates with the year first, eg 10/11/12 is parsed as "
"2010-11-12."
msgstr ""

#: mars.dataframe.to_datetime:20 of
msgid ""
"If both dayfirst and yearfirst are True, yearfirst is preceded (same as "
"dateutil)."
msgstr ""

#: mars.dataframe.to_datetime:23 of
msgid ""
"Warning: yearfirst=True is not strict, but will prefer to parse with year"
" first (this is a known bug, based on dateutil behavior)."
msgstr ""

#: mars.dataframe.to_datetime:26 of
msgid ""
"Return UTC DatetimeIndex if True (converting any tz-aware "
"datetime.datetime objects as well)."
msgstr ""

#: mars.dataframe.to_datetime:29 of
#, python-format
msgid ""
"The strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse "
"all the way up to nanoseconds. See strftime documentation for more "
"information on choices: https://docs.python.org/3/library/datetime.html"
"#strftime-and-strptime-behavior."
msgstr ""

#: mars.dataframe.to_datetime:34 of
msgid ""
"Behaves as: - If True, require an exact format match. - If False, allow "
"the format to match anywhere in the target string."
msgstr ""

#: mars.dataframe.to_datetime:38 of
msgid ""
"The unit of the arg (D,s,ms,us,ns) denote the unit, which is an integer "
"or float number. This will be based off the origin. Example, with "
"unit='ms' and origin='unix' (the default), this would calculate the "
"number of milliseconds to the unix epoch start."
msgstr ""

#: mars.dataframe.to_datetime:43 of
msgid ""
"If True and no `format` is given, attempt to infer the format of the "
"datetime strings, and if it can be inferred, switch to a faster method of"
" parsing them. In some cases this can increase the parsing speed by "
"~5-10x."
msgstr ""

#: mars.dataframe.to_datetime:48 of
msgid ""
"Define the reference date. The numeric values would be parsed as number "
"of units (defined by `unit`) since this reference date.  - If 'unix' (or "
"POSIX) time; origin is set to 1970-01-01. - If 'julian', unit must be "
"'D', and origin is set to beginning of   Julian Calendar. Julian day "
"number 0 is assigned to the day starting   at noon on January 1, 4713 BC."
" - If Timestamp convertible, origin is set to Timestamp identified by   "
"origin."
msgstr ""

#: mars.dataframe.to_datetime:48 of
msgid ""
"Define the reference date. The numeric values would be parsed as number "
"of units (defined by `unit`) since this reference date."
msgstr ""

#: mars.dataframe.to_datetime:51 of
msgid "If 'unix' (or POSIX) time; origin is set to 1970-01-01."
msgstr ""

#: mars.dataframe.to_datetime:52 of
msgid ""
"If 'julian', unit must be 'D', and origin is set to beginning of Julian "
"Calendar. Julian day number 0 is assigned to the day starting at noon on "
"January 1, 4713 BC."
msgstr ""

#: mars.dataframe.to_datetime:55 of
msgid "If Timestamp convertible, origin is set to Timestamp identified by origin."
msgstr ""

#: mars.dataframe.to_datetime:58 of
msgid ""
"If True, use a cache of unique, converted dates to apply the datetime "
"conversion. May produce significant speed-up when parsing duplicate date "
"strings, especially ones with timezone offsets. The cache is only used "
"when there are at least 50 values. The presence of out-of-bounds values "
"will render the cache unusable and may slow down parsing."
msgstr ""

#: mars.dataframe.to_datetime of
msgid "Returns"
msgstr ""

#: mars.dataframe.to_datetime:65 of
msgid ""
"If parsing succeeded. Return type depends on input:  - list-like: "
"DatetimeIndex - Series: Series of datetime64 dtype - scalar: Timestamp  "
"In case when it is not possible to return designated types (e.g. when any"
" element of input is before Timestamp.min or after Timestamp.max) return "
"will have datetime.datetime type (or corresponding array/Series)."
msgstr ""

#: mars.dataframe.to_datetime:65 of
msgid "If parsing succeeded. Return type depends on input:"
msgstr ""

#: mars.dataframe.to_datetime:68 of
msgid "list-like: DatetimeIndex"
msgstr ""

#: mars.dataframe.to_datetime:69 of
msgid "Series: Series of datetime64 dtype"
msgstr ""

#: mars.dataframe.to_datetime:70 of
msgid "scalar: Timestamp"
msgstr ""

#: mars.dataframe.to_datetime:72 of
msgid ""
"In case when it is not possible to return designated types (e.g. when any"
" element of input is before Timestamp.min or after Timestamp.max) return "
"will have datetime.datetime type (or corresponding array/Series)."
msgstr ""

#: mars.dataframe.to_datetime of
msgid "Return type"
msgstr ""

#: mars.dataframe.to_datetime:81 of
msgid ":func:`DataFrame.astype`"
msgstr ""

#: mars.dataframe.to_datetime:81 of
msgid "Cast argument to a specified dtype."
msgstr ""

#: mars.dataframe.to_datetime:84 of
msgid ":func:`to_timedelta`"
msgstr ""

#: mars.dataframe.to_datetime:84 of
msgid "Convert argument to timedelta."
msgstr ""

#: mars.dataframe.to_datetime:86 of
msgid ":func:`convert_dtypes`"
msgstr ""

#: mars.dataframe.to_datetime:87 of
msgid "Convert dtypes."
msgstr ""

#: mars.dataframe.to_datetime:90 of
msgid "Examples"
msgstr ""

#: mars.dataframe.to_datetime:91 of
msgid ""
"Assembling a datetime from multiple columns of a DataFrame. The keys can "
"be common abbreviations like ['year', 'month', 'day', 'minute', 'second',"
" 'ms', 'us', 'ns']) or plurals of the same"
msgstr ""

#: mars.dataframe.to_datetime:105 of
msgid ""
"If a date does not meet the `timestamp limitations "
"<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html "
"#timeseries-timestamp-limits>`_, passing errors='ignore' will return the "
"original input instead of raising any exception."
msgstr ""

#: mars.dataframe.to_datetime:110 of
msgid ""
"Passing errors='coerce' will force an out-of-bounds date to NaT, in "
"addition to forcing non-dates (or non-parseable dates) to NaT."
msgstr ""

#: mars.dataframe.to_datetime:118 of
msgid ""
"Passing infer_datetime_format=True can often-times speedup a parsing if "
"its not an ISO8601 format exactly, but in a regular format."
msgstr ""

#: mars.dataframe.to_datetime:130 of
msgid "Using a unix epoch time"
msgstr ""

#: mars.dataframe.to_datetime:137 of
msgid ""
"For float arg, precision rounding might happen. To prevent unexpected "
"behavior use a fixed-width exact type."
msgstr ""

#: mars.dataframe.to_datetime:140 of
msgid "Using a non-unix epoch origin"
msgstr ""

