# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/reference/dataframe/api/mars.dataframe.DataFrame.eq.rst:2
msgid "mars.dataframe.DataFrame.eq"
msgstr ""

#: mars.dataframe.DataFrame.eq:1 of
msgid ""
"Get Equal to of dataframe and other, element-wise (binary operator `eq`)."
" Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to "
"comparison operators."
msgstr ""

#: mars.dataframe.DataFrame.eq:5 of
msgid ""
"Equivalent to `dataframe == other` with support to choose axis (rows or "
"columns) and level for comparison."
msgstr ""

#: mars.dataframe.DataFrame.eq of
msgid "Parameters"
msgstr ""

#: mars.dataframe.DataFrame.eq:8 of
msgid "Any single or multiple element data structure, or list-like object."
msgstr ""

#: mars.dataframe.DataFrame.eq:10 of
msgid ""
"Whether to compare by the index (0 or 'index') or columns (1 or "
"'columns')."
msgstr ""

#: mars.dataframe.DataFrame.eq:13 of
msgid ""
"Broadcast across a level, matching Index values on the passed MultiIndex "
"level."
msgstr ""

#: mars.dataframe.DataFrame.eq of
msgid "Returns"
msgstr ""

#: mars.dataframe.DataFrame.eq:17 of
msgid "Result of the comparison."
msgstr ""

#: mars.dataframe.DataFrame.eq of
msgid "Return type"
msgstr ""

#: mars.dataframe.DataFrame.eq:23 of
msgid ":meth:`DataFrame.eq`"
msgstr ""

#: mars.dataframe.DataFrame.eq:23 of
msgid "Compare DataFrames for equality elementwise."
msgstr ""

#: mars.dataframe.DataFrame.eq:26 of
msgid ":meth:`DataFrame.ne`"
msgstr ""

#: mars.dataframe.DataFrame.eq:26 of
msgid "Compare DataFrames for inequality elementwise."
msgstr ""

#: mars.dataframe.DataFrame.eq:29 of
msgid ":meth:`DataFrame.le`"
msgstr ""

#: mars.dataframe.DataFrame.eq:29 of
msgid "Compare DataFrames for less than inequality or equality elementwise."
msgstr ""

#: mars.dataframe.DataFrame.eq:32 of
msgid ":meth:`DataFrame.lt`"
msgstr ""

#: mars.dataframe.DataFrame.eq:32 of
msgid "Compare DataFrames for strictly less than inequality elementwise."
msgstr ""

#: mars.dataframe.DataFrame.eq:35 of
msgid ":meth:`DataFrame.ge`"
msgstr ""

#: mars.dataframe.DataFrame.eq:35 of
msgid "Compare DataFrames for greater than inequality or equality elementwise."
msgstr ""

#: mars.dataframe.DataFrame.eq:37 of
msgid ":meth:`DataFrame.gt`"
msgstr ""

#: mars.dataframe.DataFrame.eq:38 of
msgid "Compare DataFrames for strictly greater than inequality elementwise."
msgstr ""

#: mars.dataframe.DataFrame.eq:41 of
msgid "Notes"
msgstr ""

#: mars.dataframe.DataFrame.eq:42 of
msgid ""
"Mismatched indices will be unioned together. `NaN` values are considered "
"different (i.e. `NaN` != `NaN`)."
msgstr ""

#: mars.dataframe.DataFrame.eq:46 of
msgid "Examples"
msgstr ""

#: mars.dataframe.DataFrame.eq:56 of
msgid "Comparison with a scalar, using either the operator or method:"
msgstr ""

#: mars.dataframe.DataFrame.eq:70 of
msgid ""
"When `other` is a :class:`Series`, the columns of a DataFrame are aligned"
" with the index of `other` and broadcast:"
msgstr ""

#: mars.dataframe.DataFrame.eq:79 of
msgid "Use the method to control the broadcast axis:"
msgstr ""

#: mars.dataframe.DataFrame.eq:88 of
msgid ""
"When comparing to an arbitrary sequence, the number of columns must match"
" the number elements in `other`:"
msgstr ""

#: mars.dataframe.DataFrame.eq:97 of
msgid "Use the method to control the axis:"
msgstr ""

#: mars.dataframe.DataFrame.eq:105 of
msgid "Compare to a DataFrame of different shape."
msgstr ""

#: mars.dataframe.DataFrame.eq:123 of
msgid "Compare to a MultiIndex by level."
msgstr ""

