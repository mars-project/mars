# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/reference/tensor/generated/mars.tensor.r_.rst:2
msgid "mars.tensor.r\\_"
msgstr ""

#: mars.tensor.r_:1 of
msgid "Translates slice objects to concatenation along the first axis."
msgstr ""

#: mars.tensor.r_:3 of
msgid "This is a simple way to build up tensor quickly. There are two use cases."
msgstr ""

#: mars.tensor.r_:5 of
msgid ""
"If the index expression contains comma separated tensors, then stack them"
" along their first axis."
msgstr ""

#: mars.tensor.r_:7 of
msgid ""
"If the index expression contains slice notation or scalars then create a "
"1-D tensor with a range indicated by the slice notation."
msgstr ""

#: mars.tensor.r_:10 of
msgid ""
"If slice notation is used, the syntax ``start:stop:step`` is equivalent "
"to ``mt.arange(start, stop, step)`` inside of the brackets. However, if "
"``step`` is an imaginary number (i.e. 100j) then its integer portion is "
"interpreted as a number-of-points desired and the start and stop are "
"inclusive. In other words ``start:stop:stepj`` is interpreted as "
"``mt.linspace(start, stop, step, endpoint=1)`` inside of the brackets. "
"After expansion of slice notation, all comma separated sequences are "
"concatenated together."
msgstr ""

#: mars.tensor.r_:19 of
msgid ""
"Optional character strings placed as the first element of the index "
"expression can be used to change the output. The strings 'r' or 'c' "
"result in matrix output. If the result is 1-D and 'r' is specified a 1 x "
"N (row) matrix is produced. If the result is 1-D and 'c' is specified, "
"then a N x 1 (column) matrix is produced. If the result is 2-D then both "
"provide the same matrix result."
msgstr ""

#: mars.tensor.r_:26 of
msgid ""
"A string integer specifies which axis to stack multiple comma separated "
"tensors along. A string of two comma-separated integers allows indication"
" of the minimum number of dimensions to force each entry into as the "
"second integer (the axis to concatenate along is still the first "
"integer)."
msgstr ""

#: mars.tensor.r_:31 of
msgid ""
"A string with three comma-separated integers allows specification of the "
"axis to concatenate along, the minimum number of dimensions to force the "
"entries to, and which axis should contain the start of the tensors which "
"are less than the specified number of dimensions. In other words the "
"third integer allows you to specify where the 1's should be placed in the"
" shape of the tensors that have their shapes upgraded. By default, they "
"are placed in the front of the shape tuple. The third argument allows you"
" to specify where the start of the tensor should be instead. Thus, a "
"third argument of '0' would place the 1's at the end of the tensor shape."
" Negative integers specify where in the new shape tuple the last "
"dimension of upgraded tensors should be placed, so the default is '-1'."
msgstr ""

#: mars.tensor.r_ of
msgid "Parameters"
msgstr ""

#: mars.tensor.r_ of
msgid "Returns"
msgstr ""

#: mars.tensor.r_ of
msgid "Return type"
msgstr ""

#: mars.tensor.r_:51 of
msgid ":obj:`concatenate`"
msgstr ""

#: mars.tensor.r_:51 of
msgid "Join a sequence of tensors along an existing axis."
msgstr ""

#: mars.tensor.r_:53 of
msgid ":obj:`c_`"
msgstr ""

#: mars.tensor.r_:54 of
msgid "Translates slice objects to concatenation along the second axis."
msgstr ""

#: mars.tensor.r_:57 of
msgid "Examples"
msgstr ""

#: mars.tensor.r_:64 of
msgid ""
"String integers specify the axis to concatenate along or the minimum "
"number of dimensions to force entries into."
msgstr ""

