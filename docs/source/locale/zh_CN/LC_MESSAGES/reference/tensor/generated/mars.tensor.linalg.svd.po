# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/reference/tensor/generated/mars.tensor.linalg.svd.rst:2
msgid "mars.tensor.linalg.svd"
msgstr ""

#: mars.tensor.linalg.svd:1 of
msgid "Singular Value Decomposition."
msgstr ""

#: mars.tensor.linalg.svd:3 of
msgid ""
"When `a` is a 2D tensor, it is factorized as ``u @ np.diag(s) @ vh = (u *"
" s) @ vh``, where `u` and `vh` are 2D unitary tensors and `s` is a 1D "
"tensor of `a`'s singular values. When `a` is higher-dimensional, SVD is "
"applied in stacked mode as explained below."
msgstr ""

#: mars.tensor.linalg.svd of
msgid "Parameters"
msgstr ""

#: mars.tensor.linalg.svd:8 of
msgid "A real or complex tensor with ``a.ndim >= 2``."
msgstr ""

#: mars.tensor.linalg.svd:10 of
msgid ""
"method to calculate qr factorization, tsqr as default  TSQR is presented "
"in:      A. Benson, D. Gleich, and J. Demmel.     Direct QR "
"factorizations for tall-and-skinny matrices in     MapReduce "
"architectures.     IEEE International Conference on Big Data, 2013.     "
"http://arxiv.org/abs/1301.1071"
msgstr ""

#: mars.tensor.linalg.svd:10 of
msgid "method to calculate qr factorization, tsqr as default"
msgstr ""

#: mars.tensor.linalg.svd:12 of
msgid "TSQR is presented in:"
msgstr ""

#: mars.tensor.linalg.svd:14 of
msgid ""
"A. Benson, D. Gleich, and J. Demmel. Direct QR factorizations for tall-"
"and-skinny matrices in MapReduce architectures. IEEE International "
"Conference on Big Data, 2013. http://arxiv.org/abs/1301.1071"
msgstr ""

#: mars.tensor.linalg.svd of
msgid "Returns"
msgstr ""

#: mars.tensor.linalg.svd:21 of
msgid ""
"* **u** (*{ (..., M, M), (..., M, K) } tensor*) -- Unitary tensor(s). The"
" first ``a.ndim - 2`` dimensions have the same   size as those of the "
"input `a`. The size of the last two dimensions   depends on the value of "
"`full_matrices`. Only returned when   `compute_uv` is True. * **s** "
"(*(..., K) tensor*) -- Vector(s) with the singular values, within each "
"vector sorted in   descending order. The first ``a.ndim - 2`` dimensions "
"have the same   size as those of the input `a`. * **vh** (*{ (..., N, N),"
" (..., K, N) } tensor*) -- Unitary tensor(s). The first ``a.ndim - 2`` "
"dimensions have the same   size as those of the input `a`. The size of "
"the last two dimensions   depends on the value of `full_matrices`. Only "
"returned when   `compute_uv` is True."
msgstr ""

#: mars.tensor.linalg.svd:21 of
msgid ""
"**u** (*{ (..., M, M), (..., M, K) } tensor*) -- Unitary tensor(s). The "
"first ``a.ndim - 2`` dimensions have the same size as those of the input "
"`a`. The size of the last two dimensions depends on the value of "
"`full_matrices`. Only returned when `compute_uv` is True."
msgstr ""

#: mars.tensor.linalg.svd:25 of
msgid ""
"**s** (*(..., K) tensor*) -- Vector(s) with the singular values, within "
"each vector sorted in descending order. The first ``a.ndim - 2`` "
"dimensions have the same size as those of the input `a`."
msgstr ""

#: mars.tensor.linalg.svd:28 of
msgid ""
"**vh** (*{ (..., N, N), (..., K, N) } tensor*) -- Unitary tensor(s). The "
"first ``a.ndim - 2`` dimensions have the same size as those of the input "
"`a`. The size of the last two dimensions depends on the value of "
"`full_matrices`. Only returned when `compute_uv` is True."
msgstr ""

#: mars.tensor.linalg.svd of
msgid "Raises"
msgstr ""

#: mars.tensor.linalg.svd:33 of
msgid "If SVD computation does not converge."
msgstr ""

#: mars.tensor.linalg.svd:36 of
msgid "Notes"
msgstr ""

#: mars.tensor.linalg.svd:37 of
msgid ""
"SVD is usually described for the factorization of a 2D matrix :math:`A`. "
"The higher-dimensional case will be discussed below. In the 2D case, SVD "
"is written as :math:`A = U S V^H`, where :math:`A = a`, :math:`U= u`, "
":math:`S= \\mathtt{np.diag}(s)` and :math:`V^H = vh`. The 1D tensor `s` "
"contains the singular values of `a` and `u` and `vh` are unitary. The "
"rows of `vh` are the eigenvectors of :math:`A^H A` and the columns of `u`"
" are the eigenvectors of :math:`A A^H`. In both cases the corresponding "
"(possibly non-zero) eigenvalues are given by ``s**2``."
msgstr ""

#: mars.tensor.linalg.svd:46 of
msgid ""
"If `a` has more than two dimensions, then broadcasting rules apply, as "
"explained in :ref:`routines.linalg-broadcasting`. This means that SVD is "
"working in \"stacked\" mode: it iterates over all indices of the first "
"``a.ndim - 2`` dimensions and for each combination SVD is applied to the "
"last two indices. The matrix `a` can be reconstructed from the "
"decomposition with either ``(u * s[..., None, :]) @ vh`` or ``u @ (s[...,"
" None] * vh)``. (The ``@`` operator can be replaced by the function "
"``mt.matmul`` for python versions below 3.5.)"
msgstr ""

#: mars.tensor.linalg.svd:56 of
msgid "Examples"
msgstr ""

#: mars.tensor.linalg.svd:61 of
msgid "Reconstruction based on reduced SVD, 2D case:"
msgstr ""

