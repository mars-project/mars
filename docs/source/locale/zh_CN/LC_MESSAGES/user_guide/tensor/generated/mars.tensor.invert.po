# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-16 16:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/user_guide/tensor/generated/mars.tensor.invert.rst:2
msgid "mars.tensor.invert"
msgstr ""

#: mars.tensor.invert:1 of
msgid "Compute bit-wise inversion, or bit-wise NOT, element-wise."
msgstr ""

#: mars.tensor.invert:3 of
msgid ""
"Computes the bit-wise NOT of the underlying binary representation of the "
"integers in the input tensors. This ufunc implements the C/Python "
"operator ``~``."
msgstr ""

#: mars.tensor.invert:7 of
msgid ""
"For signed integer inputs, the two's complement is returned.  In a "
"two's-complement system negative numbers are represented by the two's "
"complement of the absolute value. This is the most common method of "
"representing signed integers on computers [1]_. A N-bit two's-complement "
"system can represent every integer in the range :math:`-2^{N-1}` to "
":math:`+2^{N-1}-1`."
msgstr ""

#: mars.tensor.invert of
msgid "Parameters"
msgstr ""

#: mars.tensor.invert:14 of
msgid "Only integer and boolean types are handled."
msgstr ""

#: mars.tensor.invert:16 of
msgid ""
"A location into which the result is stored. If provided, it must have a "
"shape that the inputs broadcast to. If not provided or `None`, a freshly-"
"allocated tensor is returned. A tuple (possible only as a keyword "
"argument) must have length equal to the number of outputs."
msgstr ""

#: mars.tensor.invert:21 of
msgid ""
"Values of True indicate to calculate the ufunc at that position, values "
"of False indicate to leave the value in the output alone."
msgstr ""

#: mars.tensor.invert of
msgid "Returns"
msgstr ""

#: mars.tensor.invert:26 of
msgid "**out** -- Result."
msgstr ""

#: mars.tensor.invert of
msgid "Return type"
msgstr ""

#: mars.tensor.invert:29 of
msgid ""
":func:`bitwise_and`, :func:`bitwise_or`, :func:`bitwise_xor`, "
":func:`logical_not`"
msgstr ""

#: mars.tensor.invert:32 of
msgid "Notes"
msgstr ""

#: mars.tensor.invert:33 of
msgid "`bitwise_not` is an alias for `invert`:"
msgstr ""

#: mars.tensor.invert:41 of
msgid "References"
msgstr ""

#: mars.tensor.invert:42 of
msgid ""
"Wikipedia, \"Two's complement\", "
"http://en.wikipedia.org/wiki/Two's_complement"
msgstr ""

#: mars.tensor.invert:46 of
msgid "Examples"
msgstr ""

#: mars.tensor.invert:47 of
msgid ""
"We've seen that 13 is represented by ``00001101``. The invert or bit-wise"
" NOT of 13 is then:"
msgstr ""

#: mars.tensor.invert:53 of
msgid "The result depends on the bit-width:"
msgstr ""

#: mars.tensor.invert:58 of
msgid ""
"When using signed integer types the result is the two's complement of the"
" result for the unsigned type:"
msgstr ""

#: mars.tensor.invert:64 of
msgid "Booleans are accepted as well:"
msgstr ""

