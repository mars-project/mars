# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1999-2020, The Alibaba Group Holding Ltd.
# This file is distributed under the same license as the mars package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mars 0.5.0a2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-03 18:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/getting_started/dataframe.rst:4
msgid "Mars DataFrame"
msgstr ""

#: ../../source/getting_started/dataframe.rst:6
msgid "For a quick tour of Mars DataFrame, please visit :ref:`10min`."
msgstr "想快速了解 Mars DataFrame，请访问 :ref:`10min`。"

#: ../../source/getting_started/dataframe.rst:8
msgid "Mars DataFrame can be initialized just like pandas DataFrame."
msgstr "Mars DataFrame 的创建方式和 pandas DataFrame 非常相似。"

#: ../../source/getting_started/dataframe.rst:16
msgid "Pandas DataFrame can be passed to Mars DataFrame either."
msgstr "也可以直接从 pandas DataFrame 创建 Mars DataFrame。"

#: ../../source/getting_started/dataframe.rst:24
msgid "Creating Mars DataFrame from Mars tensor."
msgstr "从 Mars tensor 创建 Mars DataFrame。"

#: ../../source/getting_started/dataframe.rst:31
msgid "Mars DataFrame can read data from CSV files, SQL tables, etc."
msgstr "Mars DataFrame 能通过 CSV 文件和 SQL 表来创建。"

#: ../../source/getting_started/dataframe.rst:39
msgid "Mars DataFrame also supports reading data from HDFS by providing a URL."
msgstr "Mars DataFrame 也能够通过提供 URL 读取 HDFS 来创建。"

#: ../../source/getting_started/dataframe.rst:46
msgid "For more information about DataFrame creation, refer to :ref:`api.io`."
msgstr "关于如何创建 DataFrame，参考 :ref:`api.io`。"

#: ../../source/getting_started/dataframe.rst:48
msgid ""
"Like Mars tensor, DataFrame is lazy evaluated as well. If you want to get"
" result, ``.execute()`` needs to be called."
msgstr ""
"类似 Mars tensor，DataFrame 也是延迟执行的。如果要获取结果，需要调用 ``."
"execute()``。"

#: ../../source/getting_started/dataframe.rst:74
msgid "Remember that ``DataFrame.execute()`` will return DataFrame itself."
msgstr "记住，``DataFrame.execute()`` 会返回 DataFrame 自身。"

#: ../../source/getting_started/dataframe.rst:76
msgid ""
"For more implemented DataFrame API, refer to :ref:`DataFrame API "
"reference <dataframe_api>`."
msgstr "了解更多 DataFrame 接口，参考 :ref:`api`。"

#: ../../source/getting_started/dataframe.rst:78
msgid ""
"In order to convert Mars DataFrame to pandas, ``.execute().fetch()`` can "
"be called.  An alternative is ``.to_pandas()``."
msgstr ""
"调用 ``.execute().fetch()`` 来把 Mars DataFrame 转成 pandas。或者使用快捷"
"方法 ``.to_pandas()``。"

#: ../../source/getting_started/dataframe.rst:113
msgid ""
"Users should always consider using ``.execute()`` instead of "
"``.to_pandas()``, because when the DataFrame is large, ``.execute()`` "
"will only fetch head and tail rows for display purpose. On the other "
"hand, ``.to_pandas()`` will try to generate the entire DataFrame on the "
"server side and return it back to client, which is extremely inefficient "
"and may cause OutOfMemory error."
msgstr ""
"应当优先考虑使用 ``.execute()`` 而不是 ``.to_pandas()``，因为当 DataFrame"
" 很大的时候，``.execute()`` 只会获取前几行和后几行数据来展示。而 ``.to_"
"pandas()`` 会在服务端生成完整的 DataFrame，然后返回到客户端，这非常低效，"
"而且很有可能导致内存溢出。"

#: ../../source/getting_started/dataframe.rst:120
msgid ""
"If multiple DataFrames need to be executed together, ``mars.execute()`` "
"could be used."
msgstr "使用 ``mars.execute()`` 来执行多个 DataFrame。"

#: ../../source/getting_started/dataframe.rst:136
msgid "DataFrame can be saved to CSV etc."
msgstr "DataFrame 能被保存到 CSV 文件。"

#: ../../source/getting_started/dataframe.rst:145
msgid "Refer to :ref:`api.dataframe.io` for more information."
msgstr "参考 :ref:`api.dataframe.io` 获取更多信息。"

#: ../../source/getting_started/dataframe.rst:147
msgid "DataFrame can be read from CSV which is saved in `OSS <https://help.aliyun.com/document_detail/32027.html>`_."
msgstr "DataFrame 可以从被保存在 OSS 上的 CSV 文件中读取。"

#: ../../source/getting_started/dataframe.rst:160
msgid "You can find AccessKey by `AcessKey Documentation <https://help.aliyun.com/document_detail/53045.htm?spm=a2c4g.11186623.0.0.401f4b78nWS2uH#task968>`_,"
msgstr "你可以通过 `AcessKey 文档 <https://help.aliyun.com/document_detail/32027.html>`_ 描述的方法获取你的 AccessKey"

#: ../../source/getting_started/dataframe.rst:161
msgid "and get endpoint by `Comparison table of OSS Region and Endpoint <https://help.aliyun.com/document_detail/31837.htm?spm=a2c4g.11186623.0.0.cd7c7041aR2CL9>`_."
msgstr "并且，你可以通过 `公共云下 OSS Region 和 Endpoint 对照表 <https://help.aliyun.com/document_detail/31837.htm?spm=a2c4g.11186623.0.0.cd7c7041aR2CL9>`_ 获得对应 bucket 的 endpoint 。"