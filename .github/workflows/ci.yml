name: Mars CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, macOS-latest, windows-latest]
        python-version: [3.5, 3.6, 3.7, 3.8, 3.8-kubernetes, 3.8-hadoop, 3.8-cython]
        include:
          - { os: ubuntu-16.04, python-version: 3.5, python-abis: "cp35-cp35m" }
          - { os: ubuntu-16.04, python-version: 3.6, python-abis: "cp36-cp36m" }
          - { os: ubuntu-16.04, python-version: 3.7, python-abis: "cp37-cp37m" }
          - { os: ubuntu-16.04, python-version: 3.8, python-abis: "cp38-cp38" }
          - { os: ubuntu-16.04, python-version: 3.8-kubernetes, no-common-tests: 1,
              no-deploy: 1, with-kubernetes: "with Kubernetes" }
          - { os: ubuntu-16.04, python-version: 3.8-hadoop, no-common-tests: 1,
              no-deploy: 1, with-hadoop: "with hadoop" }
          - { os: ubuntu-16.04, python-version: 3.8-cython, no-common-tests: 1,
              no-deploy: 1, with-cython: "with Cython" }
          - { os: windows-latest, python-version: 3.8, build-static: 1 }
        exclude:
          - { os: macOS-latest, python-version: 3.8-kubernetes }
          - { os: macOS-latest, python-version: 3.8-hadoop }
          - { os: macOS-latest, python-version: 3.8-cython }
          - { os: windows-latest, python-version: 3.8-kubernetes }
          - { os: windows-latest, python-version: 3.8-hadoop }
          - { os: windows-latest, python-version: 3.8-cython }

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up conda ${{ matrix.python-version }}
      env:
        PYTHON: ${{ matrix.python-version }}
      shell: bash
      run: |
        source ./.github/workflows/install-conda.sh
        python -m pip install --upgrade pip setuptools wheel coverage;

    - name: Install dependencies
      env:
        WITH_HADOOP: ${{ matrix.with-hadoop }}
        WITH_KUBERNETES: ${{ matrix.with-kubernetes }}
        NO_COMMON_TESTS: ${{ matrix.no-common-tests }}
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        export DEFAULT_VENV=$VIRTUAL_ENV
        if [[ $UNAME == "darwin" ]] && [[ "$PYTHON" =~ "3.7" ]]; then
          # workaround of https://issues.apache.org/jira/browse/ARROW-8684
          pip install pyarrow==0.15.1
        fi
        if [[ "$PYTHON" =~ "3.8" ]]; then
          conda install -n test --quiet --yes python=$PYTHON numpy
        fi
        pip install -r requirements-dev.txt
        pip install -r requirements-extra.txt
        if [[ $UNAME == "windows" ]]; then
          pip install virtualenv flake8
        else
          pip install virtualenv flake8 etcd-gevent
          if [ -z "$NO_COMMON_TESTS" ]; then
            if [[ $UNAME == "linux" ]]; then
              pip install h5py zarr
              pip install matplotlib
            fi
            if [[ $UNAME == "linux" ]] && [[ ! "$PYTHON" =~ "3.5" ]]; then
              conda install -n test --quiet --yes -c conda-forge python=$PYTHON "tiledb-py>=0.4.3,<0.6.0" "tiledb<2.0.0" || true
              conda install -n test --quiet --yes -c pkgs/main python=$PYTHON certifi
            fi
            if [[ $UNAME == "linux" ]] && [[ ! "$PYTHON" =~ "3.5" ]] && [[ ! "$PYTHON" =~ "3.8" ]]; then
              conda install --quiet --yes -n test -c conda-forge --no-deps python=$PYTHON libxgboost py-xgboost xgboost
            fi
            if [[ $UNAME == "linux" ]] && [[ "$PYTHON" =~ "3.6" ]]; then
              pip install torch==1.4.0 torchvision==0.5.0
              conda install -n test --quiet --yes -c pytorch python=$PYTHON faiss-cpu
            fi
            if [[ $UNAME == "linux" ]] && [[ ! "$PYTHON" =~ "3.8" ]]; then
              pip install tensorflow
              pip install torch torchvision
            fi
            virtualenv testenv && source testenv/bin/activate
            if [[ $UNAME == "darwin" ]] && [[ "$PYTHON" =~ "3.7" ]]; then
              # workaround of https://issues.apache.org/jira/browse/ARROW-8684
              pip install pyarrow==0.15.1
            fi
            pip install -r requirements.txt && pip install pytest pytest-timeout
            if [ -z "$DEFAULT_VENV" ]; then
              deactivate
            else
              source $DEFAULT_VENV/bin/activate
            fi
          fi
          ./.github/workflows/download-etcd.sh
          if [ -n "$WITH_KUBERNETES" ]; then
            ./.github/workflows/install-minikube.sh
            pip install kubernetes
          fi
          if [ -n "$WITH_HADOOP" ]; then
            ./.github/workflows/install-hadoop.sh
            conda install -n test --quiet --yes -c conda-forge python=$PYTHON skein
          fi
        fi
        conda list

    - name: Lint with flake8
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        # stop the build if there are Python syntax errors or undefined names
        flake8 mars --count --select=E9,E111,E225,E302,E303,E901,E999,F7,F63,F82,F401,F821,F822,F823,F841,W291,W292,W391 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 mars --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build cython extensions
      env:
        WITH_CYTHON: ${{ matrix.with-cython }}
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        if [ -z "$WITH_CYTHON" ]; then
          for cf in `ls .coveragerc*`; do
            sed -i.bak "s/plugins *= *Cython\.Coverage//g" $cf;
            sed -i.bak -e '/*\.pxd/ a\
            \ \ \ \ *.pyx \
            ' $cf
          done
        else
          export CYTHON_TRACE=1
          for cf in `ls .coveragerc*`; do
            sed -i.bak -e '/*\.pxd/ a\
            \ \ \ \ *.py \
            ' $cf
          done
        fi
        pip install -e ".[dev]"

    - name: Test with pytest
      env:
        WITH_HADOOP: ${{ matrix.with-hadoop }}
        WITH_KUBERNETES: ${{ matrix.with-kubernetes }}
        WITH_CYTHON: ${{ matrix.with-cython }}
        NO_COMMON_TESTS: ${{ matrix.no-common-tests }}
        NUMPY_EXPERIMENTAL_ARRAY_FUNCTION: 1
        CHANGE_MINIKUBE_NONE_USER: true
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        source ./.github/workflows/run-tests.sh

        mkdir covdata
        cp .coverage covdata/.coverage.$RUNNER_TRACKING_ID
        echo $(pwd) > covdata/.pwd.$RUNNER_TRACKING_ID

    - name: Deploy packages
      if: startsWith(github.ref, 'refs/tags/') && matrix.no-deploy != '1'
      shell: bash
      env:
        DOCKER_IMAGE: "quay.io/pypa/manylinux1_x86_64"
        PYABI: ${{ matrix.python-abis }}
        BUILD_STATIC: ${{ matrix.build-static }}
        PYPI_PWD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        source ./.github/workflows/reload-env.sh
        source ./.github/workflows/upload-packages.sh

    - name: Persist coverage data
      uses: actions/upload-artifact@v1
      if: startsWith(matrix.os, 'windows') != true
      with:
        name: covdata
        path: covdata

  finish-build:
    needs: build
    runs-on: ubuntu-16.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Load coverage data
        uses: actions/download-artifact@v1
        with:
          name: covdata

      - name: Collect coverage data
        run: |
          pip install numpy cython gevent coverage
          pip install codecov
          CYTHON_TRACE=1 python setup.py sdist
          export DEFAULT_VENV=$VIRTUAL_ENV
          coverage combine covdata/
          coverage xml

      - name: Prepare coverage token
        if: success() && github.repository == 'mars-project/mars'
        run: cp .github/codecov-upstream.yml .codecov.yml

      - name: Report coverage data
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
