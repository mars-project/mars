name: Mars CI for OS compatibility

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, windows-latest]
        python-version: [3.6, 3.8]

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Set up conda ${{ matrix.python-version }}
      env:
        PYTHON: ${{ matrix.python-version }}
      shell: bash
      run: |
        source ./.github/workflows/install-conda.sh
        python -m pip install --upgrade pip setuptools wheel coverage;

    - name: Install dependencies
      env:
        WITH_HADOOP: ${{ matrix.with-hadoop }}
        WITH_KUBERNETES: ${{ matrix.with-kubernetes }}
        NO_COMMON_TESTS: ${{ matrix.no-common-tests }}
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        export DEFAULT_VENV=$VIRTUAL_ENV

        pip install -r requirements-dev.txt
        pip install -r requirements-extra.txt
        if [[ $UNAME == "windows" ]]; then
          pip install virtualenv flake8
        else
          pip install virtualenv flaky flake8 etcd-gevent
          if [ -z "$NO_COMMON_TESTS" ]; then
            virtualenv testenv && source testenv/bin/activate
            pip install -r requirements.txt && pip install pytest pytest-timeout
            if [ -z "$DEFAULT_VENV" ]; then
              deactivate
            else
              source $DEFAULT_VENV/bin/activate
            fi
          fi
        fi
        conda list -n test

    - name: Build cython extensions
      env:
        WITH_CYTHON: ${{ matrix.with-cython }}
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh
        for cf in `ls .coveragerc*`; do
          sed -i.bak "s/plugins *= *Cython\.Coverage//g" $cf;
          sed -i.bak -e '/*\.pxd/ a\
          \ \ \ \ *.pyx \
          ' $cf
        done
        retry python setup.py build_ext -i -j 2
        pip install -e ".[dev]"

    - name: Test with pytest
      env:
        WITH_HADOOP: ${{ matrix.with-hadoop }}
        WITH_KUBERNETES: ${{ matrix.with-kubernetes }}
        WITH_CYTHON: ${{ matrix.with-cython }}
        NO_COMMON_TESTS: ${{ matrix.no-common-tests }}
        NUMPY_EXPERIMENTAL_ARRAY_FUNCTION: 1
        CHANGE_MINIKUBE_NONE_USER: true
      shell: bash
      run: |
        source ./.github/workflows/reload-env.sh

        export NO_SERIALIZE_IN_TEST_EXECUTOR=1
        mkdir -p build
        python -m pytest $PYTEST_CONFIG --cov-config .coveragerc-threaded --timeout=1500 \
          mars/dataframe mars/learn mars/remote mars/serialize mars/tensor
        mv .coverage build/.coverage.tensor.file
        if [[ $UNAME == "darwin" ]]; then
          python -m pytest $PYTEST_CONFIG --cov-config .coveragerc --forked --timeout=1500 \
            --ignore mars/tests/test_kvstore.py mars/oscar mars/deploy/local mars/web \
            mars/lib mars/tests
          mv .coverage build/.coverage.dist.file
        fi
        coverage combine build/ && coverage report
        coverage xml

    - name: Prepare coverage token
      if: success() && github.repository == 'mars-project/mars'
      run: cp .github/codecov-upstream.yml .codecov.yml

    - name: Report coverage data
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
